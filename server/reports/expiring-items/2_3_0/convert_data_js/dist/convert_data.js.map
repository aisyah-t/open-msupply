{
  "version": 3,
  "sources": ["../src/convert_data.js"],
  "sourcesContent": ["// import { cleanUpNodes } from \"../../../../utils\";\n\nfunction convert_data() {\n  let res = JSON.parse(Host.inputString());\n  // res.stockLines.nodes = processStockLines(res.stockLines.nodes);\n  Host.outputString(JSON.stringify(res));\n}\n\nconst processStockLines = (nodes) => {\n  nodes.forEach((line) => {\n    if (Object.keys(line).length == 0) {\n      return;\n    }\n    const daysUntilExpiredFloat = calculateDaysUntilExpired(line?.expiryDate);\n    const expectedUsage = calculateExpectedUsage(\n      daysUntilExpiredFloat,\n      line?.item?.stats?.averageMonthlyConsumption\n    );\n    if (!!expectedUsage) {\n      line.expectedUsage = expectedUsage;\n    }\n    const stockAtRisk = calculateStockAtRisk(\n      line?.packSize,\n      line?.totalNumberOfPacks,\n      line?.item?.stats?.averageMonthlyConsumption,\n      daysUntilExpiredFloat\n    );\n    if (!!stockAtRisk) {\n      line.stockAtRisk = stockAtRisk;\n    }\n    line.daysUntilExpired = roundDaysToInteger(daysUntilExpiredFloat);\n  });\n  let cleanNodes = cleanUpNodes(nodes);\n  return cleanNodes;\n};\n\nconst calculateDaysUntilExpired = (expiryDateString) => {\n  let daysUntilExpired = undefined;\n  if (!!expiryDateString) {\n    let now = Date.now();\n    daysUntilExpired = (new Date(expiryDateString) - now) / 1000 / 60 / 60 / 24;\n  }\n  return daysUntilExpired;\n};\n\nconst calculateExpectedUsage = (\n  daysUntilExpired,\n  averageMonthlyConsumption\n) => {\n  let expectedUsage = undefined;\n  if (!!daysUntilExpired && !!averageMonthlyConsumption) {\n    if (daysUntilExpired >= 0) {\n      expectedUsage = Math.round(\n        daysUntilExpired * (averageMonthlyConsumption / 30)\n      );\n    }\n  }\n  return expectedUsage;\n};\n\nconst calculateStockAtRisk = (\n  packSize,\n  totalNumberOfPacks,\n  averageMonthlyConsumption,\n  daysUntilExpired\n) => {\n  let stockAtRisk = undefined;\n  if (!!packSize && !!totalNumberOfPacks && !!daysUntilExpired) {\n    const totalStock = packSize * totalNumberOfPacks;\n    if (!!averageMonthlyConsumption) {\n      if (daysUntilExpired >= 0) {\n        stockAtRisk = Math.round(\n          totalStock - averageMonthlyConsumption * (daysUntilExpired / 30)\n        );\n      } else {\n        stockAtRisk = Math.round(totalStock);\n      }\n    }\n    if (!averageMonthlyConsumption) {\n      if (daysUntilExpired <= 0) {\n        stockAtRisk = Math.round(totalStock);\n      }\n    }\n  }\n  return stockAtRisk;\n};\n\nconst roundDaysToInteger = (daysUntilExpired) => {\n  let rounded = undefined;\n  if (!!daysUntilExpired) {\n    rounded = Math.round(daysUntilExpired);\n  }\n  return rounded;\n};\n\nmodule.exports = {\n  // calculateExpectedUsage,\n  convert_data,\n  // processStockLines,\n  // calculateDaysUntilExpired,\n  // calculateStockAtRisk,\n  // roundDaysToInteger,\n};\n"],
  "mappings": ";AAEA,SAAS,eAAe;AACtB,MAAI,MAAM,KAAK,MAAM,KAAK,YAAY,CAAC;AAEvC,OAAK,aAAa,KAAK,UAAU,GAAG,CAAC;AACvC;AAyFA,OAAO,UAAU;AAAA;AAAA,EAEf;AAAA;AAAA;AAAA;AAAA;AAKF;",
  "names": []
}
